package spaceGame;

import org.newdawn.slick.Graphics;
import org.newdawn.slick.Image;
import org.newdawn.slick.SlickException;
import org.newdawn.slick.geom.Point;

public class SLaser {
	
	private float startX = 0, startY = 0, desX = 0, desY = 0, speed = 0, deg, dx, dy;
	Point location = new Point(0,0);
	Image theimage = new Image("res/LaserV2.png");
	double mangle = 0;
	float mmangle = 0;
	boolean isRotated = false;
	
	public SLaser(float startX, float startY, float desX, float desY) throws SlickException{
		this.startX = startX;
		this.startY = startY;
		this.desX = desX;
		this.desY = desY;
		location.setLocation(startX, startY);
		recalculateVector(desX, desY);
		recalculateAngle(desX, desY);
	}
	
	public void render(Graphics g) throws SlickException {
	   
	    }  
	
	private void recalculateVector(float desX2, float desY2) {
		float vec = (float)(Math.atan2(desX2 - startX, desY2 - startY));
		//set speed
		speed = 2;
		
		this.dx = (float) Math.sin(vec) * speed;
        this.dy = (float) Math.cos(vec) * speed;
	}
	
	public void recalculateVector(){
		recalculateVector(desX, desY);
	}
	
	private void recalculateAngle(float desX2, float desY2){
		float mecX = desX2 - startX;
		float mecY = desY2 - startY;
		double mas = Math.asin(mecY/mecX);
		mangle = (double) mas * 360;
		mmangle = (float) mangle;
	}
	
	public float getAngle(){
		return mmangle;
	}
	public void move(){
		float x = location.getX();
		float y = location.getY();
		
		x+=dx;
		y+=dy;
		
		location.setLocation(x,y);
	}
	
	
	public boolean isRotated(){
		return isRotated;
	}
	public Image getImage(){
		return theimage;
	}
}
