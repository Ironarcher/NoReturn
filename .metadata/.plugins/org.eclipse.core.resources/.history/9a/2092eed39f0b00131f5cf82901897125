package nitrogene.core;

import nitrogene.collision.AABB;

import org.newdawn.slick.Image;
import org.newdawn.slick.SlickException;
import org.newdawn.slick.geom.Point;


public class SLaser {
	
	private float startX = 0, startY = 0, desX = 0, desY = 0, speed = 0, dx, dy;
	Point location = new Point(0,0);
	Image theimage = new Image("res/LaserV2ro.png");
	double mangle = 0;
	float mmangle;
	public AABB boundbox;
	boolean isRotated = false, isPlaying = false;
	
	public SLaser(float startX, float startY, float destinX, float destinY, float cameraX, float cameraY) throws SlickException{
		this.startX =startX;
		this.startY =startY;
		this.desX = destinX + cameraX;
		this.desY = destinY + cameraY;
		location.setLocation(startX,startY);
		boundbox = new AABB((float) (theimage.getTextureWidth() * 0.7), (float)(theimage.getTextureHeight() * 0.7));
		recalculateVector(desX, desY);
		recalculateAngle(desX, desY);
	}
	
	private void updateBounds(float x, float y){
		boundbox.center = boundbox.getCenter(x, y);
	}
	
	private void recalculateVector(float desX2, float desY2) {
		float vec = (float)(Math.atan2(desX2 - startX, desY2 - startY));
		//set speed
		speed = (float) 40;

		this.dx = (float) Math.sin(vec) * speed;
        this.dy = (float) Math.cos(vec) * speed;
	}
	
	public void recalculateVector(){
		recalculateVector(desX, desY);
	}
	
	public void recalculateAngle(float desX2, float desY2){
		double mecX = (desX2 - startX);
		double mecY = (desY2 - startY);
		mangle = Math.toDegrees(Math.atan2(mecY,mecX));
		mmangle = (float) mangle;
	}
	
	public float getAngle(){
		return mmangle;
	}
	public void move(){
		float x = location.getX();
		float y = location.getY();
		
		x+=dx;
		y+=dy;
		
		location.setLocation(x,y);
		
		//update boundbox
		updateBounds(x,y);
	}
	
	
	public boolean isRotated(){
		return isRotated;
	}
	public Image getImage(){
		return theimage;
	}
}
